//
//  SpeechRecognizer.swift
//  Jarvis
//
//  Created by Ritvik Janamsetty on 7/9/23.
//

import AVFoundation
import Speech
import SwiftUI
import Foundation

/// A helper for transcribing speech to text using `SFSpeechRecognizer` and `AVAudioEngine`.
actor SpeechRecognizer {
    
    // MARK: - Error Handling
    
    /// Error definitons for `SpeechRecognizer`
    enum SpeechRecognizerError: LocalizedError {
        case nilRecognizer
        case notAuthorizedToRecognize
        case notPermittedToRecord
        case recognizerUnavailable
        case audioEngineUnavailable(_ error: Error)
        case alreadyTranscribing
        
        /// Error message assoicated with `SpeechRecognizerError`
        var errorDescription: String {
            switch self {
            case .nilRecognizer:
                return NSLocalizedString("Can't initialize speech recognizer", comment: "")
            case .notAuthorizedToRecognize:
                return NSLocalizedString("Not authorized to recognize speech", comment: "")
            case .notPermittedToRecord:
                return NSLocalizedString("Not permitted to record audio", comment: "")
            case .recognizerUnavailable:
                return NSLocalizedString("Recognizer is unavailable", comment: "")
            case .audioEngineUnavailable(let error):
                return NSLocalizedString("Audio engine setup failed with error: \(error.localizedDescription)", comment: "")
            case .alreadyTranscribing:
                return NSLocalizedString("The SpeechRecognizer transcribing, reset the SpeechRecognizer before using", comment: "")
            }
        }
    }
    
    // MARK: - Properties
    
    /// Transcript generated by the speech recognizer
    var transcript: String = ""
    /// The audio engine used for audio processing.
    private var audioEngine: AVAudioEngine?
    /// The speech recognition request for audio buffer recognition.
    private var request: SFSpeechAudioBufferRecognitionRequest?
    /// The speech recognition task.
    private var task: SFSpeechRecognitionTask?
    /// The speech recognizer used for speech recognition.
    private let recognizer: SFSpeechRecognizer?
    /// Indicated whether the speech recognizer is currently transcribing speech.
    private var isTranscribing = false
    
    // MARK: - Initialization
    
    /// Initializes a new speech recognizer. If this is the first time you've used the class, it
    /// requests access to the speech recognizer and the microphone.
    /// - Throws: An error of type `RecognizerError`if a speech recognizer can't be created
    init() throws {
        recognizer = SFSpeechRecognizer()
        guard recognizer != nil else {
            throw logAndThrow(SpeechRecognizerError.nilRecognizer)
        }
        
        Task {
            guard await SFSpeechRecognizer.hasAuthorizationToRecognize() else {
                throw logAndThrow(SpeechRecognizerError.notAuthorizedToRecognize)
            }
            guard await AVAudioSession.sharedInstance().hasPermissionToRecord() else {
                throw logAndThrow( SpeechRecognizerError.notPermittedToRecord)
            }
        }
    }
    
    // MARK: - Public Methods
    
    /// Begin transcribing audio.
    /// Creates a `SFSpeechRecognitionTask` that transcribes speech to text until you call `stopTranscribing()`.
    /// The resulting transcription is continuously written to the published `transcript` property.
    /// - Throws: An error of type `RecognizerError` is either the engine fails or the recognizer is unavailable
    func start() throws {
        
        if isTranscribing {
            throw logAndThrow(SpeechRecognizerError.alreadyTranscribing)
        }
        
        // Check if the recognizer is available
        guard let recognizer, recognizer.isAvailable else {
            throw SpeechRecognizerError.recognizerUnavailable
        }
        
        // Attempt voice recognition, else stop recording and throw error
        do {
            let (audioEngine, request) = try Self.prepareEngine()
            self.audioEngine = audioEngine
            self.request = request
            self.task = recognizer.recognitionTask(with: request, resultHandler: { [weak self] result, error in
                self?.recognitionHandler(audioEngine: audioEngine, result: result, error: error)
            })
            isTranscribing = true
        } catch {
            self.reset()
            throw logAndThrow(SpeechRecognizerError.audioEngineUnavailable(error))
        }
    }
    
    @discardableResult
    /// Reset the speech recognizer.
    func reset() -> String {
        isTranscribing = false
        task?.cancel()
        audioEngine?.stop()
        audioEngine = nil
        request = nil
        task = nil
        return transcript
    }
    
    // MARK: - Private Methods
    
    /// Prepares the audio engine and speech recognition request.
    /// - Returns: A tuple containing the prepared audio engine and speech recognition request.
    /// - Throws: An error of type `RecognizerError` if there's an issue setting up the audio engine or audio session.
    private static func prepareEngine() throws -> (AVAudioEngine, SFSpeechAudioBufferRecognitionRequest) {
        // Create audio engine and speech recognizer
        let audioEngine = AVAudioEngine()
        let request = SFSpeechAudioBufferRecognitionRequest()
        request.shouldReportPartialResults = true
        
        // Configure the audio session and notify others when it is deactivated
        let audioSession = AVAudioSession.sharedInstance()
        try audioSession.setCategory(.playAndRecord, mode: .measurement, options: .duckOthers)
        try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
        
        // Set up the input node (mic) and install a tap to recive audio buffers
        let inputNode = audioEngine.inputNode
        let recordingFormat = inputNode.outputFormat(forBus: 0)
        inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { (buffer: AVAudioPCMBuffer, when: AVAudioTime) in
            request.append(buffer)
        }
        
        // Proccess audio engine and recognition request
        audioEngine.prepare()
        try audioEngine.start()
        return (audioEngine, request)
    }
    
    /// Handles the speech recognition result or error.
    /// Stops the audio engine and removes the tap on the input node if the result is final or an error is received.
    /// - Parameters:
    ///   - audioEngine: The audio engine used for speech recognition.
    ///   - result: The speech recognition result.
    ///   - error: The error encountered during speech recognition, if any.
    nonisolated private func recognitionHandler(audioEngine: AVAudioEngine, result: SFSpeechRecognitionResult?, error: Error?) {
        // Check whether an end condition is reached for stopping recording
        let receivedFinalResult = result?.isFinal ?? false
        let receivedError = error != nil
        
        // Stop recording if conditon met
        if receivedFinalResult || receivedError {
            audioEngine.stop()
            audioEngine.inputNode.removeTap(onBus: 0)
        }
        
        // Get and set transcription
        if let result {
            Task { await transcribe(result.bestTranscription.formattedString) }
        }
    }
    
    /// Transcribes the given message.
    /// - Parameter message: The message to transcribe.
    private func transcribe(_ message: String) {
        transcript = message
    }
    
    /// Logs the `Error` and throws it
    /// - Parameter error: The `Error` to be logged
    /// - Returns: The given `Error` to be able to thrown in one line
    nonisolated private func logAndThrow(_ error: Error) -> Error {
        return SystemMonitor.logAndThrow(with: error, at: "SpeechRecognizer")
    }
    
}

// MARK: - Extensions

extension SFSpeechRecognizer {
    
    /// Checks if the app has authorization to perform speech recognition.
    /// - Returns: A boolean value indicating whether the app is authorized for speech recognition.
    static func hasAuthorizationToRecognize() async -> Bool {
        await withCheckedContinuation { continuation in
            requestAuthorization { status in
                continuation.resume(returning: status == .authorized)
            }
        }
    }
}

extension AVAudioSession {
    
    /// Checks if the app has permission to record audio.
    /// - Returns: A boolean value indicating whether the app is authorized for audio recording.
    func hasPermissionToRecord() async -> Bool {
        await withCheckedContinuation { continuation in
            requestRecordPermission { authorized in
                continuation.resume(returning: authorized)
            }
        }
    }
}
